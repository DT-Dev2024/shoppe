generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model productcategories {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime?  @default(now()) @db.Date
  deleted_at DateTime?  @updatedAt @db.Date
  image      String
  name       String
  updated_at DateTime?  @updatedAt @db.Date
  products   products[]
}

model shops {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  products      products[]
  followers     Int
  followings    Int
  reply         Int
  feedback      Float
  take_part_int String
  created_at    DateTime?  @default(now()) @db.Date
  updated_at    DateTime?  @updatedAt @db.Date
  deleted_at    DateTime?  @db.Date
}

model vouchers {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  type          voucher_type
  code          String
  discount      Float
  discount_type discount_type
  minium_price  Float
  expire        DateTime?

  created_at DateTime? @default(now()) @db.Date
  updated_at DateTime? @updatedAt @db.Date
  deleted_at DateTime? @updatedAt @db.Date
  orders     orders[]
}

enum voucher_type {
  SHOP
  USER
}

enum discount_type {
  PERCENTAGE
  FIXED
}

model products {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  category        productcategories? @relation(fields: [category_id], references: [id])
  category_id     String?            @db.ObjectId
  created_at      DateTime?          @default(now()) @db.Date
  image           String
  detailImage     String[]
  name            String
  description     String
  price           Float              @default(0)
  sale_price      Float
  updated_at      DateTime?          @updatedAt @db.Date
  keyword         String             @default("")
  // product_types   products_type[]
  shop            shops?             @relation(fields: [shopId], references: [id])
  shopId          String?            @db.ObjectId
  product_feeback product_feeback?
  order_details   order_details[]
  cart_item       cart_item[]
}

model product_feeback {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  star       Float
  comment    Int
  sold       Int
  product    products? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String?   @unique @db.ObjectId
  created_at DateTime? @default(now()) @db.Date
  deleted_at DateTime? @db.Date
  updated_at DateTime? @updatedAt @db.Date
}

// model products_type {
//   id         String    @id @default(auto()) @map("_id") @db.ObjectId
//   name       String
//   price      Float
//   store      Int       @default(1000)
//   created_at DateTime? @default(now()) @db.Date
//   updated_at DateTime? @updatedAt @db.Date
//   deleted_at DateTime? @db.Date

//   products   products? @relation(fields: [productsId], references: [id])
//   productsId String?   @db.ObjectId
// }

model users {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  phone      String      @unique @db.String
  name       String?
  email      String?
  password   String?
  address    addresses[]
  created_at DateTime?   @default(now()) @db.Date
  updated_at DateTime?   @updatedAt @db.Date
  roles      roles       @default(USER)
  orders     orders[]
  cart       cart?
}

model addresses {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  address    String
  name       String
  phone      String
  default    Boolean   @default(false)
  created_at DateTime? @default(now()) @db.Date
  updated_at DateTime? @updatedAt @db.Date
  users      users?    @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId    String?   @db.ObjectId
  orders     orders[]
}

model ui_home_data_source {
  id                                  String    @id @default(auto()) @map("_id") @db.ObjectId
  headerSearchHistoryListInfo         String[]
  headerSearchHistoryKeywordsListInfo String[]
  bannerListInfo                      String[]
  created_at                          DateTime? @default(now()) @db.Date
  updated_at                          DateTime? @updatedAt @db.Date
}

model orders {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  user           users?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?         @db.ObjectId
  // order_discount order_discounts?
  voucherId      String?         @db.ObjectId
  voucher        vouchers?       @relation(fields: [voucherId], references: [id], onDelete: Cascade)
  order_details  order_details[]
  address_id     String          @db.ObjectId
  address        addresses?      @relation(fields: [address_id], references: [id], onDelete: Cascade)
  total_price    Float
  payment_method payment_method
  created_at     DateTime?       @default(now()) @db.Date
  updated_at     DateTime?       @updatedAt @db.Date
  deleted_at     DateTime?       @db.Date
}

model cart {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  user          users?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?         @unique @db.ObjectId
  cart_items    cart_item[]
  created_at    DateTime?       @default(now()) @db.Date
  updated_at    DateTime?       @updatedAt @db.Date
  deleted_at    DateTime?       @db.Date
  order_details order_details[]
}

model cart_item {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  product    products? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String?   @db.ObjectId
  buy_count  Int
  price      Float     @default(0)
  created_at DateTime? @default(now()) @db.Date
  updated_at DateTime? @updatedAt @db.Date
  cart       cart?     @relation(fields: [cartId], references: [id])
  cartId     String?   @db.ObjectId
}

// model order_discounts {
//   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//   vouchers       String[]
//   order          orders    @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   orderId        String    @unique @db.ObjectId
//   total_discount Float
//   created_at     DateTime? @default(now()) @db.Date
//   updated_at     DateTime? @updatedAt @db.Date
//   deleted_at     DateTime? @updatedAt @db.Date
// }

model order_details {
  id                    String                @id @default(auto()) @map("_id") @db.ObjectId
  order                 orders                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId               String                @db.ObjectId
  product               products?             @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId             String?               @db.ObjectId
  buy_count             Int
  price                 Float                 @default(0)
  price_before_discount Float                 @default(0)
  status                order_status          @default(WAITING)
  created_at            DateTime?             @default(now()) @db.Date
  updated_at            DateTime?             @updatedAt @db.Date
  cart                  cart?                 @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId                String?               @db.ObjectId
  list_address_status   list_address_status[]
}

model list_address_status {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  status          order_status  @default(WAITING)
  address         String
  created_at      DateTime?     @default(now()) @db.Date
  updated_at      DateTime?     @updatedAt @db.Date
  deleted_at      DateTime?     @db.Date
  order_details   order_details @relation(fields: [order_detailsId], references: [id])
  order_detailsId String        @db.ObjectId
}

model payments {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  MOMO        String
  BANK        String
  PAY_OFFLINE String
  status      Boolean   @default(true)
  created_at  DateTime? @default(now()) @db.Date
  updated_at  DateTime? @updatedAt @db.Date
  deleted_at  DateTime? @db.Date
}

enum order_status {
  WAITING
  DELIVERING
  WAIT_RECEIVED
  DELIVERED
  CANCELED
  RETURN
}

enum payment_method {
  MOMO
  BANK
  PAY_OFFLINE
}

enum roles {
  USER
  ADMIN
}
